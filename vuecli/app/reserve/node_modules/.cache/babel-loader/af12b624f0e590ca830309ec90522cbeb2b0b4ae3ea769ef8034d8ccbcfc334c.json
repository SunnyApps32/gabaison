{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-485424ce\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"header\", null, [/*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"title\"\n}, \"ログイン \")], -1 /* HOISTED */));\nconst _hoisted_2 = {\n  class: \"container\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"ID(メールアドレス)\", -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1 /* HOISTED */));\nconst _hoisted_5 = {\n  class: \"container\"\n};\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"パスワード\", -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1 /* HOISTED */));\nconst _hoisted_8 = {\n  class: \"message\"\n};\nconst _hoisted_9 = {\n  class: \"red\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"body\", null, [_hoisted_1, _createElementVNode(\"main\", null, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    type: \"email\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.inputValueId = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.inputValueId]]), _createCommentVNode(\" この下の<p></p>はテキストボックスを中央に配置するために必要な疑似要素です \"), _hoisted_4]), _createElementVNode(\"div\", _hoisted_5, [_hoisted_6, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.inputValuePassword = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.inputValuePassword]]), _createCommentVNode(\" この下の<p></p>はテキストボックスを中央に配置するために必要な疑似要素です \"), _hoisted_7]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"p\", _hoisted_9, _toDisplayString($data.errorMessage) + \" \", 1 /* TEXT */)]), _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n    class: \"btn_standard\",\n    type: \"submit\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.logIn && $options.logIn(...args))\n  }, \"ログインする\")]), _hoisted_10])]);\n}","map":{"version":3,"names":["_createElementVNode","class","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","type","_cache","$event","$data","inputValueId","_createCommentVNode","_hoisted_4","_hoisted_5","_hoisted_6","inputValuePassword","_hoisted_7","_hoisted_8","_hoisted_9","_toDisplayString","errorMessage","onClick","args","$options","logIn","_hoisted_10"],"sources":["/app/reserve/src/views/LoginPage.vue"],"sourcesContent":["<template>\n    <body>\n        <header>\n            <div class=\"title\">ログイン\n            </div>\n        </header>\n\n        <main>\n            <div class=\"container\">\n                <p>ID(メールアドレス)</p>\n                <input type=\"email\" v-model=\"inputValueId\">\n                <!-- この下の<p></p>はテキストボックスを中央に配置するために必要な疑似要素です -->\n                <p></p>\n            </div>\n\n            <div class=\"container\">\n                <p>パスワード</p>\n                <input type=\"password\" v-model=\"inputValuePassword\">\n                <!-- この下の<p></p>はテキストボックスを中央に配置するために必要な疑似要素です -->\n                <p></p>\n            </div>\n\n            <div class=\"message\">\n                <p class=\"red\">{{ errorMessage }}&nbsp;</p>\n            </div>\n\n            <div>\n                <button class=\"btn_standard\" type=\"submit\" v-on:click=\"logIn\">ログインする</button>\n            </div>\n\n            <br>\n        \n\n        </main>\n\n \n    </body>\n</template>\n\n<script>\n\n// Firebase関連のインポート\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nimport Firebase from \"../firebase/firebase\";\nconst auth = Firebase.auth\n\nexport default {\n\n\n\n    methods: {\n        // Home画面へ遷移\n        goToHome() {\n            this.$router.push('/')\n        },\n\n        // ログイン\n        logIn() {\n            // IDとパスワードの未入力チェック\n            if (this.inputValueId === undefined || this.inputValueId === \"\" || this.inputValuePassword === undefined || this.inputValuePassword === \"\") {\n                this.errorMessage = 'IDまたはパスワードが未入力です'\n                return\n            }\n\n            // エラーメッセージの消去\n            this.errorMessage = \"\"\n\n            // ローディングアニメーション\n            this.isLoading = true\n\n            // id,passを取得\n            const mId = this.inputValueId\n            const mPass = this.inputValuePassword\n\n            // 連続クリックを防ぐためにパスワード欄を空欄にする\n            this.inputValuePassword = \"\"\n\n            // サインインメソッド\n            signInWithEmailAndPassword(auth, mId, mPass)\n                // サインイン成功時\n                .then((userCredential) => {\n                    const user = userCredential.user;\n                    console.log(\"ログイン成功 \" + user.email)\n\n                 \n                        this.goToHome()\n                    \n                  \n                })\n\n                // サインイン失敗時\n                .catch((error) => {\n                    const errorCode = error.code;\n                    const errorMessage = error.message;\n                    console.log('ログインエラー: errorCode -> ' + errorCode + ', errorMessage -> ' + errorMessage)\n                    this.JudgeErrorCode(errorCode)\n\n                    // ローディングアニメーション\n                    this.isLoading = false\n                });\n        },\n\n        register(){\n            this.$router.push('/register')\n        },\n\n        // FirebaseAuthから受け取ったエラーコードを判定しエラーメッセージを表示する\n        JudgeErrorCode(mError) {\n            const errorCode = String(mError)\n            if (errorCode === 'auth/wrong-password' || errorCode === 'auth/invalid-email' || errorCode === 'auth/user-not-found') {\n                this.errorMessage = \"ログインに失敗しました。IDまたはパスワードが間違っています\"\n            } else {\n                this.errorMessage = \"ログインに失敗しました。予期せぬエラーが発生しました。\"\n            }\n        },\n\n    },\n\n    data() {\n        return {\n            // ローディングアニメーション\n            isLoading: false,\n\n            // エラーメッセージ\n            errorMessage: '',\n\n            // 入力欄\n            inputValueId: \"\",\n            inputValuePassword: \"\",\n        }\n    },\n\n    computed: {\n\n    },\n\n\n}\n</script>\n\n<style scoped>\nheader {\n    height: 120px;\n}\n\nheader .title {\n    font-size: 40px;\n    padding: 20px 0 0;\n}\n\nmain {\n    padding: 30px auto;\n}\n\n.container {\n    display: flex;\n    justify-content: center;\n    margin: 30px 0 0;\n}\n\n.container input {\n    width: 400px;\n}\n\n.container p {\n    width: 200px;\n    text-align: left;\n    margin-top: 8px;\n}\n\n.login_info_container {\n    display: flex;\n    justify-content: center;\n    margin-top: 10px;\n}\n\n.login_info {\n    text-align: left;\n    background-color: #efefef;\n    padding: 20px 100px;\n    border-radius: 20px;\n}\n\n.loading_animation_container {\n    height: 15px;\n    margin-top: 10px;\n}\n\n.btn_url {\n  border-radius: 0px;\n  padding: 0;\n\n  background-color: white;\n  border-color: white;\n  color: blue;\n\n  transform: translate(0, 0px);\n\n}\n\n  \nbutton {\n    padding: 10px 15px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    cursor: pointer;\n    border-radius: 5px;\n  }\n  \n  button:hover {\n    background-color: #0056b3;\n  }\n\n\n</style>\n"],"mappings":";;gEAEQA,mBAAA,CAGS,iB,aAFLA,mBAAA,CACM;EADDC,KAAK,EAAC;AAAO,GAAC,OACnB,E;;EAIKA,KAAK,EAAC;AAAW;gEAClBD,mBAAA,CAAkB,WAAf,aAAW;gEAGdA,mBAAA,CAAO;;EAGNC,KAAK,EAAC;AAAW;gEAClBD,mBAAA,CAAY,WAAT,OAAK;gEAGRA,mBAAA,CAAO;;EAGNC,KAAK,EAAC;AAAS;;EACbA,KAAK,EAAC;AAAK;iEAOlBD,mBAAA,CAAI;;uBA7BZE,mBAAA,CAmCO,eAlCHC,UAGS,EAETH,mBAAA,CA0BO,eAzBHA,mBAAA,CAKM,OALNI,UAKM,GAJFC,UAAkB,E,gBAClBL,mBAAA,CAA2C;IAApCM,IAAI,EAAC,OAAO;IAVnC,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAU6CC,KAAA,CAAAC,YAAY,GAAAF,MAAA;iDAAZC,KAAA,CAAAC,YAAY,E,GACzCC,mBAAA,8CAAiD,EACjDC,UAAO,C,GAGXZ,mBAAA,CAKM,OALNa,UAKM,GAJFC,UAAY,E,gBACZd,mBAAA,CAAoD;IAA7CM,IAAI,EAAC,UAAU;IAjBtC,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAiBgDC,KAAA,CAAAM,kBAAkB,GAAAP,MAAA;iDAAlBC,KAAA,CAAAM,kBAAkB,E,GAClDJ,mBAAA,8CAAiD,EACjDK,UAAO,C,GAGXhB,mBAAA,CAEM,OAFNiB,UAEM,GADFjB,mBAAA,CAA2C,KAA3CkB,UAA2C,EAAAC,gBAAA,CAAzBV,KAAA,CAAAW,YAAY,IAAG,GAAM,gB,GAG3CpB,mBAAA,CAEM,cADFA,mBAAA,CAA6E;IAArEC,KAAK,EAAC,cAAc;IAACK,IAAI,EAAC,QAAQ;IAAMe,OAAK,EAAAd,MAAA,QAAAA,MAAA,UAAAe,IAAA,KAAEC,QAAA,CAAAC,KAAA,IAAAD,QAAA,CAAAC,KAAA,IAAAF,IAAA,CAAK;KAAE,QAAM,E,GAGxEG,WAAI,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}